package jda.modules.security.def;

import jda.modules.common.exceptions.ConstraintViolationException;
import jda.modules.common.types.Tuple;
import jda.modules.dcsl.syntax.AttrRef;
import jda.modules.dcsl.syntax.DAssoc;
import jda.modules.dcsl.syntax.DAttr;
import jda.modules.dcsl.syntax.DCSLConstants;
import jda.modules.dcsl.syntax.DClass;
import jda.modules.dcsl.syntax.DOpt;
import jda.modules.dcsl.syntax.DAssoc.AssocEndType;
import jda.modules.dcsl.syntax.DAssoc.AssocType;
import jda.modules.dcsl.syntax.DAssoc.Associate;
import jda.modules.dcsl.syntax.DAttr.Type;

/**
 * @overview 
 *  The association class between {@see DomainUser} and {@see Role}
 *  
 * @author dmle
 */
@DClass(schema=DCSLConstants.SECURITY_SCHEMA)
public class UserRole {
  public static final String A_role = "role";
  public static final String A_user = "user";
  
  @DAttr(name="id",id=true,auto=true,type=Type.Integer,mutable=false,length=6)
  private int id; 
  private static int idCounter;
  
  @DAttr(name=A_user,type=Type.Domain,optional=false,length=6)
  @DAssoc(ascName=DomainUser.Association_WithUserRole,role="userRole",
    ascType=AssocType.One2Many,endType=AssocEndType.Many,
    associate=@Associate(type=DomainUser.class,cardMin=1,cardMax=1)
    ,dependsOn=true // v3.2
    )
  private DomainUser user; 
  
  @DAttr(name=A_role,type=Type.Domain,optional=false,length=20)
  @DAssoc(ascName="role-for-users",role="userRole",
    ascType=AssocType.One2Many,endType=AssocEndType.Many,
    associate=@Associate(type=Role.class,cardMin=1,cardMax=DCSLConstants.CARD_MORE)) 
  private Role role;
  
  // constructor: from data source
  @DOpt(type = DOpt.Type.DataSourceConstructor)
  public UserRole(Integer id, DomainUser user, Role role) {
    this.id = nextID(id);
    this.user=user;
    this.role=role;
  }

  // constructor: from object form
  @DOpt(type = DOpt.Type.ObjectFormConstructor)
  @DOpt(type = DOpt.Type.RequiredConstructor)
  public UserRole(DomainUser user, Role role) {
    this(null, user, role);
  }

  public int getId() {
    return id;
  }

  @DOpt(type = DOpt.Type.Getter) @AttrRef(value=A_user)
  public DomainUser getUser() {
    return user;
  }

  @DOpt(type = DOpt.Type.Setter) @AttrRef(value=A_user)
  public void setUser(DomainUser user) {
    this.user = user;
  }

  @DOpt(type = DOpt.Type.Getter) @AttrRef(value=A_role)
  public Role getRole() {
    return role;
  }

  @DOpt(type = DOpt.Type.Setter) @AttrRef(value=A_role)
  public void setRole(Role role) {
    this.role = role;
  }

  @DOpt(type = DOpt.Type.AutoAttributeValueGen) @AttrRef(value="id")
  private static int nextID(Integer currID) {
    if (currID == null) { // generate one
      idCounter++;
      return idCounter;
    } else { // update
      int num;
      num = currID.intValue();
      
      if (num > idCounter) 
        idCounter=num;
      
      return currID;
    }
  }
  
  /**
   * @requires minVal != null /\ maxVal != null
   * @effects update the auto-generated value of attribute <tt>attrib</tt>,
   *          specified for <tt>derivingValue</tt>, using
   *          <tt>minVal, maxVal</tt>
   */
  @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
  public static void updateAutoGeneratedValue(DAttr attrib,
      Tuple derivingValue, Object minVal, Object maxVal)
      throws ConstraintViolationException {
    if (minVal != null && maxVal != null) {
      // check the right attribute
      if (attrib.name().equals("id")) {
        int maxIdVal = (Integer) maxVal;
        if (maxIdVal > idCounter)
          idCounter = maxIdVal;
      }
      // TODO add support for other attributes here
    }
  }
  
  @Override
  public String toString() {
    return getClass().getSimpleName()+"("+user.getLogin()+","+role.getName()+")";
  }
}
