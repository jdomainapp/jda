package jda.modules.restfstool.backend;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Set;
import java.util.stream.Stream;

import org.reflections.Reflections;
import org.reflections.scanners.SubTypesScanner;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RestController;

import jda.modules.dcsl.util.DClassTk;
import jda.modules.restfstool.backend.base.controllers.DefaultNestedRestfulController;
import jda.modules.restfstool.backend.base.controllers.DefaultRestfulController;
import jda.modules.restfstool.backend.base.services.SimpleDomServiceAdapter;
import jda.modules.restfstool.util.RFSGenTk;

/**
 * @overview 
 *  Executes a back-end that was generated by {@link BEGen}.
 *  
 * @author Duc Minh Le (ducmle)
 *
 * @version 
 */
public class BESoftware {
  
  /**
   * Use this method AFTER the generated classes have been compiled and made available in the class path.
   * @effects 
   * 
   */
  public void run(String backendTargetPackage, 
      Class<? extends BESpringApp> springAppCls, Class[] model) {
    
    System.out.println("model: " + model.length);
    Stream.of(model).forEach(System.out::println);
    
    // initialisation
    RFSGenTk.init(model);
    
    // load classes from the backEndPath
    Reflections refl = new Reflections(backendTargetPackage);
    refl.expandSuperTypes();
    Class[] superTypes = {
        SimpleDomServiceAdapter.class,
        DefaultRestfulController.class,
        DefaultNestedRestfulController.class
    };
    
    Collection<Class> comps = new ArrayList<>();
    
    for (Class supType : superTypes) {
      Set<? extends Class> comps1 = refl.getSubTypesOf(supType);
      comps1.stream().filter(c -> 
          c.isAnnotationPresent(Service.class) || 
          c.isAnnotationPresent(RestController.class)
      )
      .forEach(c -> comps.add(c));
    }
    
    System.out.println("num-comps: " + comps.size());
    comps.forEach(System.out::println);
    
    // run SpringBoot
    BESpringApp app = DClassTk.createObject(springAppCls, 
        Class[].class,
        model);
    app.run(comps);
  }
  
  /**
   * Use this method IMMEDIATELY AFTER the generated classes have been compiled by the generator
   * @effects 
   * 
   */
  public void run(Collection<Class> comps, 
      Class<? extends BESpringApp> springAppCls, Class[] model) {
    System.out.println("model: " + model.length);
    Stream.of(model).forEach(System.out::println);
    
    System.out.println("num-comps: " + comps.size());
    comps.forEach(System.out::println);

    // initialisation
    RFSGenTk.init(model);
    
    // run SpringBoot
    BESpringApp app = DClassTk.createObject(springAppCls, 
        Class[].class,
        model);
    
    app.run(comps);
  }
  
//  /**
//   * @effects 
//   *  executes SpringBoot application from the specified back-end components
//   *  @deprecated
//   */
//  public void run(Class<?>[] model, Class<?>[] auxModel,
//      String backendTargetPackage
////    ,String backendSrcPath
//      ) {
//    // initialisation
//    init(model, auxModel);
//    
//    // load classes from the backEndPath
//    Reflections refl = new Reflections(backendTargetPackage); 
//    Set<? extends Class> comps = refl.getSubTypesOf(Class.class);
//    
//    // run SpringBoot
//    new BackendMain(model).run(comps);
//  }
//
//  /**
//   * Similar to {@link RFSGen#init}
//   *  @deprecated
//   *  
//   */
//  private void init(Class<?>[] model, Class<?>[] auxModel) {
//    DomainTypeRegistry regist = DomainTypeRegistry.getInstance();
//    regist.addDomainTypes(model);
//    for (Class<?> other : auxModel) {
//      regist.addDomainType(other);
//    }
//  }
}
