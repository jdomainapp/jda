package dddcore2; 

import java.util.ArrayList;
import java.util.Collection;

import jda.modules.common.exceptions.ConstraintViolationException;
import jda.modules.dcsl.syntax.AttrRef;
import jda.modules.dcsl.syntax.DAssoc;
import jda.modules.dcsl.syntax.DAssoc.AssocEndType;
import jda.modules.dcsl.syntax.DAssoc.AssocType;
import jda.modules.dcsl.syntax.DAssoc.Associate;
import jda.modules.dcsl.syntax.DAttr;
import jda.modules.dcsl.syntax.DAttr.Type;
import jda.modules.dcsl.syntax.DCSLConstants;
import jda.modules.dcsl.syntax.DOpt;
import jda.modules.dcsl.syntax.Select;

/**
 * @overview 
 *  Pattern: Many-to-Many Association Normaliser
 * 
 * @overview 
 *  Class {@link C1}
 *  
 * @author dmle
 */
class C1 {
  @DAttr(name="a2",type=Type.Collection,serialisable=false)
  @DAssoc(ascName="C1-m-assoc-C2",role="r1",
    ascType=AssocType.Many2Many,endType=AssocEndType.Many,
    associate=@Associate(type=C2.class,cardMin=0,cardMax=DCSLConstants.CARD_MORE),
    normAttrib="aNorm")
  private Collection<C2> a2;
  
  @DAttr(name="aNorm",type=Type.Collection,optional=false,serialisable=false,
      filter=@Select(clazz=CNorm.class))
  @DAssoc(ascName="C1-assoc-CNorm",role="r1",
    ascType=AssocType.One2Many,endType=AssocEndType.One,
    associate=@Associate(type=CNorm.class,cardMin=0,cardMax=DCSLConstants.CARD_MORE))
  private Collection<CNorm> aNorm;  

  // derived
  private int aNormCount;
  
  // constructor methods
  @DOpt(type=DOpt.Type.ObjectFormConstructor)
  public C1(Collection<C2> v2) {
    //
  }
  
  /** ASSOCIATION {@link #aNorm} */
  
  @DOpt(type=DOpt.Type.Getter)@AttrRef(value="aNorm")
  public Collection<CNorm> getANorm() {
    return aNorm;
  }

  @DOpt(type=DOpt.Type.Setter)@AttrRef(value="aNorm")
  public void setANorm(Collection<CNorm> associates) {
    this.aNorm = associates;
    aNormCount = associates.size();
  }

  
  @DOpt(type=DOpt.Type.LinkAdderNew)@AttrRef(value="aNorm")
  public boolean addNewANorm(CNorm associate) {
    aNorm.add(associate);
    
    // update a2
    addA2(associate.getA2());
    
    aNormCount++;
    
    // no other attributes changed
    return false; 
  }
  
  @DOpt(type=DOpt.Type.LinkAdderNew)@AttrRef(value="aNorm")
  public boolean addNewANorm(Collection<CNorm> associates) {
    aNorm.addAll(associates);
    
    // update a2
    for (CNorm assoc: associates) {
      addA2(assoc.getA2());
    }

    aNormCount+=associates.size();
    
    // no other attributes changed
    return false; 
  }
  
  @DOpt(type=DOpt.Type.LinkAdder)@AttrRef(value="aNorm")
  public boolean addANorm(CNorm associate) {
    if (!aNorm.contains(associate)) {
      aNorm.add(associate);
    
      // update a2
      addA2(associate.getA2());

      aNormCount++;
    }
    
    // no other attributes changed
    return false; 
  }
  
  @DOpt(type=DOpt.Type.LinkAdder)@AttrRef(value="aNorm")
  public boolean addANorm(Collection<CNorm> associates) {
    for (CNorm assoc : associates) {
      if (!aNorm.contains(assoc)) {
        aNorm.add(assoc);
        
        // update a2
        addA2(assoc.getA2());
        
        aNormCount++;
      }
    }

    // no other attributes changed
    return false; 
  }

  @DOpt(type=DOpt.Type.LinkRemover)@AttrRef(value="aNorm")
  public boolean removeANorm(CNorm associate) throws ConstraintViolationException {
    boolean removed = aNorm.remove(associate);
    
    if (removed) {
      // update a2
      removeA2(associate.getA2());
      
      aNormCount--;
    }
    
    // no other attributes changed
    return false; 
  }

  @DOpt(type=DOpt.Type.LinkCountGetter)@AttrRef(value="aNormCount")
  public Integer getANormCount() {
    return aNormCount;
  }

  @DOpt(type=DOpt.Type.LinkCountSetter)@AttrRef(value="aNormCount")
  public void setANormCount(int count) {
    aNormCount = count;
  }
  
  /** END association {@link #aNorm} */
  
  /** ASSOCIATION {@link #a2}: maintained via {@link #aNorm} */
  
  @DOpt(type=DOpt.Type.Getter) @AttrRef(value="a2")
  public Collection<C2> getA2() {
    return a2;
  }

  @DOpt(type=DOpt.Type.Setter) @AttrRef(value="a2")
  public void setA2(Collection<C2> associates) {
    this.a2 = associates;
  }

  /**
   * @effects 
   *  add <tt>associate</tt> to {@link #a2}
   */
  @AttrRef(value="a2")
  private void addA2(C2 associate) {
    if (a2 == null) a2 = new ArrayList<>();
    if (!a2.contains(associate)){
      a2.add(associate);
    }
  }
  
  /**
   * @effects 
   *  remove <tt>associate</tt> from {@link #a2}
   */
  @AttrRef(value="a2")
  private void removeA2(C2 associate) {
    if (a2 != null) {
      a2.remove(associate);
    }
  }
  /** END association {@link #a2}*/  
}

/**
 * 
 * @overview 
 *  Class {@link C2}
 *  
 * @author dmle
 */
class C2 {
  @DAttr(name="a1",type=Type.Collection,serialisable=false)
  @DAssoc(ascName="C2-m-assoc-C1",role="r2",
    ascType=AssocType.Many2Many,endType=AssocEndType.Many,
    associate=@Associate(type=C1.class,cardMin=0,cardMax=DCSLConstants.CARD_MORE),
    normAttrib="aNorm")
  private Collection<C1> a1;
  
  @DAttr(name="aNorm",type=Type.Collection,optional=false,serialisable=false,
      filter=@Select(clazz=CNorm.class))
  @DAssoc(ascName="C2-assoc-CNorm",role="r2",
    ascType=AssocType.One2Many,endType=AssocEndType.One,
    associate=@Associate(type=CNorm.class,cardMin=0,cardMax=DCSLConstants.CARD_MORE))
  private Collection<CNorm> aNorm;  

  // derived
  private int aNormCount;
  
  // constructor methods
  @DOpt(type=DOpt.Type.ObjectFormConstructor)
  public C2(Collection<C1> v1) {
    //
  }
  
  /** ASSOCIATION {@link #aNorm} */
  
  @DOpt(type=DOpt.Type.Getter)@AttrRef(value="aNorm")
  public Collection<CNorm> getANorm() {
    return aNorm;
  }

  @DOpt(type=DOpt.Type.Setter)@AttrRef(value="aNorm")
  public void setANorm(Collection<CNorm> associates) {
    this.aNorm = associates;
    aNormCount = associates.size();
  }

  
  @DOpt(type=DOpt.Type.LinkAdderNew)@AttrRef(value="aNorm")
  public boolean addNewANorm(CNorm associate) {
    aNorm.add(associate);
    
    // update  a1
    addA1(associate.getA1());
    
    aNormCount++;
    
    // no other attributes changed
    return false; 
  }
  
  @DOpt(type=DOpt.Type.LinkAdderNew)@AttrRef(value="aNorm")
  public boolean addNewANorm(Collection<CNorm> associates) {
    aNorm.addAll(associates);
    
    // update a1
    for (CNorm assoc: associates) {
      addA1(assoc.getA1());
    }

    aNormCount+=associates.size();
    
    // no other attributes changed
    return false; 
  }
  
  @DOpt(type=DOpt.Type.LinkAdder)@AttrRef(value="aNorm")
  public boolean addANorm(CNorm associate) {
    if (!aNorm.contains(associate)) {
      aNorm.add(associate);
    
      // update a1
      addA1(associate.getA1());

      aNormCount++;
    }
    
    // no other attributes changed
    return false; 
  }
  
  @DOpt(type=DOpt.Type.LinkAdder)@AttrRef(value="aNorm")
  public boolean addANorm(Collection<CNorm> associates) {
    for (CNorm assoc : associates) {
      if (!aNorm.contains(assoc)) {
        aNorm.add(assoc);
        
        // update a1
        addA1(assoc.getA1());
        
        aNormCount++;
      }
    }

    // no other attributes changed
    return false; 
  }

  @DOpt(type=DOpt.Type.LinkRemover)@AttrRef(value="aNorm")
  public boolean removeANorm(CNorm associate) throws ConstraintViolationException {
    boolean removed = aNorm.remove(associate);
    
    if (removed) {
      // update a1
      removeA1(associate.getA1());
      
      aNormCount--;
    }
    
    // no other attributes changed
    return false; 
  }

  @DOpt(type=DOpt.Type.LinkCountGetter)@AttrRef(value="aNormCount")
  public Integer getANormCount() {
    return aNormCount;
  }

  @DOpt(type=DOpt.Type.LinkCountSetter)@AttrRef(value="aNormCount")
  public void setANormCount(int count) {
    aNormCount = count;
  }
  
  /** END association {@link #aNorm} */
  
  /** ASSOCIATION {@link #a1}: maintained via {@link #aNorm} */
  
  @DOpt(type=DOpt.Type.Getter) @AttrRef(value="a1")
  public Collection<C1> getA1() {
    return a1;
  }

  @DOpt(type=DOpt.Type.Setter) @AttrRef(value="a1")
  public void setA1(Collection<C1> associates) {
    this.a1 = associates;
  }

  /**
   * @effects 
   *  add <tt>associate</tt> to {@link #a1}
   */
  @AttrRef(value="a1")
  private void addA1(C1 associate) {
    if (a1 == null) a1 = new ArrayList<>();
    if (!a1.contains(associate)) {
      a1.add(associate);
    }
  }
  
  /**
   * @effects 
   *  remove <tt>associate</tt> from {@link #a1}
   */
  @AttrRef(value="a1")
  private void removeA1(C1 associate) {
    if (a1 != null) {
      a1.remove(associate);
    }
  }
  /** END association {@link #a1}*/   
}

/**
 * 
 * @overview 
 *  Class {@link CNorm}
 *  
 * @author dmle
 */
class CNorm {
  @DAttr(name="a1",type=Type.Domain,optional=false)
  @DAssoc(ascName="C1-assoc-CNorm",role="r3",
    ascType=AssocType.One2Many,endType=AssocEndType.Many,
    associate=@Associate(type=C1.class,cardMin=1,cardMax=1),
    dependsOn=true)
  private C1 a1;
  
  @DAttr(name="a2",type=Type.Domain,optional=false)
  @DAssoc(ascName="C2-assoc-CNorm",role="r3",
      ascType=AssocType.One2Many,endType=AssocEndType.Many,
    associate=@Associate(type=C2.class,cardMin=1,cardMax=1),
    dependsOn=true)
  private C2 a2;
  
  // constructor method
  public CNorm(C1 v1, C2 v2) 
      throws ConstraintViolationException {
    //
  }

  // setter methods
  @DOpt(type=DOpt.Type.Setter)@AttrRef(value="a1")
  public void setA1(C1 v) {
    this.a1 = v;
  }

  @DOpt(type=DOpt.Type.Getter)@AttrRef(value="a1")
  public C1 getA1() {
    return a1;
  }
  
  @DOpt(type=DOpt.Type.Setter)@AttrRef(value="a2")
  public void setA2(C2 v) {
    this.a2 = v;
  }

  @DOpt(type=DOpt.Type.Getter)@AttrRef(value="a2")
  public C2 getA2() {
    return a2;
  }  
}

