package org.coursemanmdsa.software.services.financialhub.modules.assessment.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import jda.modules.common.exceptions.ConstraintViolationException;
import jda.modules.common.types.Tuple;
import jda.modules.dcsl.syntax.DAttr;
import jda.modules.dcsl.syntax.DClass;
import jda.modules.dcsl.syntax.DOpt;
import jda.modules.dcsl.util.common.Gender;

import java.util.Date;

@DClass(
        serialisable = false
)
public class Assessment {
    /**
     * Represents a student. The student ID is auto-incremented from the current
     * year.
     *
     * @author dmle
     * @version 2.0
     */
    @DClass(schema = "courseman")
    public static class Teacher {
        @DAttr(name="id",id=true,auto=true,type= DAttr.Type.Integer,length=3,mutable=false,optional=false)
        private int id;
        private static int idCounter;

        @DAttr(name = "name", optional = false)
        private String teacherName;
        @DAttr(name = "gender_name")
        private Gender teacherGender;
        @DAttr(name = "dob")
        private Date teacherDob;
        @DAttr(name = "address_id", optional = false)
        private int addressId;
        @DAttr(name = "email")
        private String teacherEmail;
        @DAttr(name = "deptname", optional = false)
        private String deptName;

        // TODO: relationship
    //    @OneToMany(mappedBy="teacher")
    //    private List<CourseModule> coursemodules;

        @JsonCreator
        private Teacher() {
            this((Integer) null);
        }

        private Teacher(Integer id) {
            this.id = nextId(id);
        }

        // TODO: based constructor (used by others)
    //    private Teacher(Integer id,
    //                    String teacherName,
    //                    Gender teacherGender,
    //                    Date teacherDob) {
    //        this.id = nextId(id);
    //        this.teacherName = teacherName;
    //        this.teacherGender = teacherGender;
    //        this.teacherDob = teacherDob;
    //
    //    }

        private static int nextId(Integer currID) {
            if (currID == null) {
                idCounter++;
                return idCounter;
            } else {
                int num = currID.intValue();
                if (num > idCounter)
                    idCounter = num;

                return currID;
            }
        }

        /**
         * @requires minVal != null /\ maxVal != null
         * @effects update the auto-generated value of attribute <tt>attrib</tt>, specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
         */
        @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
        public static void updateAutoGeneratedValue(
                DAttr attrib,
                Tuple derivingValue,
                Object minVal,
                Object maxVal) throws ConstraintViolationException {

            if (minVal != null && maxVal != null) {
                //TODO: update this for the correct attribute if there are more than one auto attributes of this class
                int maxIdVal = (Integer) maxVal;
                if (maxIdVal > idCounter)
                    idCounter = maxIdVal;
            }
        }
    }
}
