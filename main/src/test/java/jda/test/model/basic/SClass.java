package jda.test.model.basic;

import java.util.ArrayList;
import java.util.List;

import jda.modules.common.exceptions.ConstraintViolationException;
import jda.modules.common.types.Tuple;
import jda.modules.dcsl.syntax.DAssoc;
import jda.modules.dcsl.syntax.DAttr;
import jda.modules.dcsl.syntax.DClass;
import jda.modules.dcsl.syntax.DOpt;
import jda.modules.dcsl.syntax.Select;
import jda.modules.dcsl.syntax.DAssoc.AssocEndType;
import jda.modules.dcsl.syntax.DAssoc.AssocType;
import jda.modules.dcsl.syntax.DAssoc.Associate;
import jda.modules.dcsl.syntax.DAttr.Type;

/**
 * Represents a student class.
 * 
 * @author dmle
 *
 */
@DClass(schema="test_basic")
public class SClass {
  @DAttr(name="id",id=true,auto=true,length=6,mutable=false,type=Type.Integer)
  private int id;
  private static int idCounter;

  @DAttr(name="name",length=20,type=Type.String)
  private String name;
  
  @DAttr(name="students",type=Type.Collection,
      serialisable=false,optional=false,
      filter=@Select(clazz=Student.class))
  @DAssoc(ascName="class-has-student",role="class",
      ascType=AssocType.One2Many,endType=AssocEndType.One,
      associate=@Associate(type=Student.class,cardMin=1,cardMax=30))  
  private List<Student> students;
  
  // create objects directly from code
  public SClass(String name) {
    this(null, name, null);
  }
  
  // create objects from data source
  public SClass(Integer id, String name) {
//    this.id = nextID(id);
//    this.name = name;
//    students = new ArrayList();
    this(id, name, null);
  }

  // create objects from object form
  public SClass(String name, List<Student> students) {
    this(null, name, students);
  }

  // used by other constructors
  private SClass(Integer id, String name, List<Student> students) {
    this.id = nextID(id);
    this.name = name;
    if (students == null)
      this.students = new ArrayList();
    else {
      this.students = students;
    }
  }

  
  public int getId() {
    return id;
  }
  

  private static int nextID(Integer currID) {
    if (currID == null) {
      idCounter++;
      return idCounter;
    } else {
      int num = currID.intValue();
      if (num > idCounter)
        idCounter = num;
      
      return currID;
    }
  }

  /**
   * @requires 
   *  minVal != null /\ maxVal != null
   * @effects 
   *  update the auto-generated value of attribute <tt>attrib</tt>, specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
   */
  @DOpt(type=DOpt.Type.AutoAttributeValueSynchroniser)
  public static void updateAutoGeneratedValue(
      DAttr attrib,
      Tuple derivingValue, 
      Object minVal, 
      Object maxVal) throws ConstraintViolationException {
    
    if (minVal != null && maxVal != null) {
      if (attrib.name().equals("id")) {
        int maxIdVal = (Integer) maxVal;
        if (maxIdVal > idCounter)  
          idCounter = maxIdVal;
      }
    }
  }
  
  public void setName(String name) {
    this.name = name;
  }

  public String getName() {
    return name;
  }
  
  public void setStudents(List<Student> students) {
    this.students = students;
  }
      
  public List<Student> getStudents() {
    return students;
  }
  
  @DOpt(type=DOpt.Type.LinkAdder)
  public boolean addStudent(Student s) {
    students.add(s);
    
    // no other attributes changed
    return false; 
  }

  @DOpt(type=DOpt.Type.LinkAdder)
  public boolean addStudent(List<Student> students) {
    this.students.addAll(students);
    
    // no other attributes changed
    return false; 
  }

  @DOpt(type=DOpt.Type.LinkRemover)
  public boolean removeStudent(Student s) {
    students.remove(s);
    
    // no other attributes changed
    return false; 
  }
  
  /**
   * @effects 
   *  return <tt>students.size()</tt>
   */
  public Integer getStudentsCount() {
    return students.size();
  }

  
  public String toString() {
    return "Class("+getId()+","+getName()+")";
  }
  
//  public boolean equals(Object o) {
//    if (o ==null || (!(o instanceof SClass))) {
//      return false;
//    }
//    
//    return ((SClass)o).id == this.id;
//  }

  
  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + id;
    return result;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    SClass other = (SClass) obj;
    if (id != other.id)
      return false;
    return true;
  }
}
