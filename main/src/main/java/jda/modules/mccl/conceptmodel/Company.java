package jda.modules.mccl.conceptmodel;

import java.util.Calendar;
import java.util.Date;

import jda.modules.common.exceptions.ConstraintViolationException;
import jda.modules.common.types.Tuple;
import jda.modules.dcsl.syntax.DAssoc;
import jda.modules.dcsl.syntax.DAttr;
import jda.modules.dcsl.syntax.DCSLConstants;
import jda.modules.dcsl.syntax.DClass;
import jda.modules.dcsl.syntax.DOpt;
import jda.modules.dcsl.syntax.DAssoc.AssocEndType;
import jda.modules.dcsl.syntax.DAssoc.AssocType;
import jda.modules.dcsl.syntax.DAssoc.Associate;
import jda.modules.dcsl.syntax.DAttr.Type;

/**
 * @overview
 *  Represent information about us, the founder of DomainApp, and the contributors. 
 *  
 * @author dmle
 * @version 2.7.3
 */
@DClass(schema=DCSLConstants.CONFIG_SCHEMA)
public class Company {
  
  @DAttr(name = "id", id = true, auto = true, type = Type.Integer, length = 5, 
      optional = false, mutable = false)
  private int id;
  private static int idCounter = 0;
  
  private static Company instance;
  
  @DAttr(name="companyName",type=DAttr.Type.String,length=50,optional=false)
  private String companyName;

  @DAttr(name="startDate",type=DAttr.Type.Date,optional=false)
  private Date startDate;
  
  @DAttr(name="config",type=Type.Domain,serialisable=false)
  @DAssoc(ascName="config-has-company",role="company",
      ascType=AssocType.One2One,endType=AssocEndType.One,
      associate=@Associate(type=Configuration.class,cardMin=1,cardMax=1,determinant=true 
      ))
  private Configuration config;
  
  public Company(Integer id, String companyName, Date startDate) {
    this.id = nextID(id);
    this.companyName = companyName;
    this.startDate = startDate;
  }

  public Company(String companyName, Date startDate) {
    this(null, companyName, startDate);
  }

  private static int nextID(Integer currID) {
    if (currID == null) { // generate one
      idCounter++;
      return idCounter;
    } else { // update
      int num;
      num = currID.intValue();
      
      if (num > idCounter) {
        idCounter=num;
      }   
      return currID;
    }
  }


  public static Company getInstance() {
    if (instance == null) {
      Calendar cal = Calendar.getInstance();
      cal.set(2012,0,4);
      Date startDate = cal.getTime();
      instance = new Company("Duc & Associates", startDate);
    }
    
    return instance;
  }

  public String getCompanyName() {
    return companyName;
  }


  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public Date getStartDate() {
    return startDate;
  }


  public void setStartDate(Date startDate) {
    this.startDate = startDate;
  }


  public int getId() {
    return id;
  }

  public Configuration getConfig() {
    return config;
  }


  public void setConfig(Configuration config) {
    this.config = config;
  }

  @Override
  public String toString() {
    return "Company (" + id + "," + companyName + ")";
  }


  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + id;
    return result;
  }


  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Company other = (Company) obj;
    if (id != other.id)
      return false;
    return true;
  }


  /**
   * @requires 
   *  minVal != null /\ maxVal != null
   * @effects 
   *  update the auto-generated value of attribute <tt>attrib</tt>, specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
   */
  @DOpt(type=DOpt.Type.AutoAttributeValueSynchroniser)
  public static void updateAutoGeneratedValue(
      DAttr attrib,
      Tuple derivingValue, 
      Object minVal, 
      Object maxVal) throws ConstraintViolationException {    
    if (minVal != null && maxVal != null) {
      // check the right attribute
      if (attrib.name().equals("id")) {
        int maxIdVal = (Integer) maxVal;
        if (maxIdVal > idCounter)  
          idCounter = maxIdVal;
      } 
      // TODO add support for other attributes here 
    }
  }
}
