package jda.modules.mosarfrontend.angular;

import java.io.File;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import jda.modules.common.io.ToolkitIO;
import jda.modules.mosar.config.RFSGenConfig;
import jda.modules.mosar.software.frontend.FEApp;
import jda.modules.mosar.software.frontend.FESoftware;
import jda.modules.mosar.utils.FileUtils;

/**
 * @overview 
 *  Represents the base React.js front-end software that is generated by {@link FESoftware}. 
 *  It is executed in the command line by Node.js.
 *  
 * @author 
 * Ha Thanh Vu<br>
 * Duc Minh Le (ducmle)
 *
 * @version 5.4.1
 */
public class FEAngularApp extends Thread implements FEApp {
  private RFSGenConfig config;

	private String feProjPath = "";
	private String feProjResource="";
	private String feOutputPath="";
	private String feProjName="";
	private String demoReactPath="";

	private long feServerPort;
		
  private static Logger logger = (Logger) LoggerFactory.getLogger("module.restfstool");

	public FEAngularApp(RFSGenConfig config) {
		this.config = config;
	}

	/**
	 * @effects 
   *  return value for {@link #feProjName} based on what is specified in <code>config</code> 
   */
  protected String getFeProjName(RFSGenConfig config) {
    return config.getFeProjName();
  }

  /**
   * @effects 
   *  return value for {@link #feServerPort} based on what is specified in <code>config</code> 
   */
  protected long getFeServerPort(RFSGenConfig config) {
	  return config.getFeServerPort();
	}
	
	@Override
	public void run() {
	  // initialise state
	  init();
	  
		if (File.separatorChar=='\\') {
//			runFEInWin();
			runFEInTest();
		}else {
			runFEInLinux();
		}
	}
	
	/**
   * @effects 
   *  initialise this 
   */
  public void init() {
    // TODO: (ducmle) improve this to:
    // 1. use user.profile directory for the feParentProjPath (maven dir is not available for the case of jar distribution)
    // 2. read and copy resources for the case of jar-file distribution 
    String feParentProjPath = ToolkitIO.getMavenProjectRootPath(FEAngularApp.class, true);
    if (feParentProjPath == null) {
      feParentProjPath = ToolkitIO.getCurrentDir();
    }
    feProjPath = FileUtils.separatorsToSystem(config.getFeProjPath());
    if(feProjPath.isEmpty()) {
      feProjPath = feParentProjPath;
    }
    feOutputPath = feParentProjPath+File.separator+ FileUtils.separatorsToSystem(config.getFeOutputPath());
    feProjResource = feParentProjPath+File.separator+ FileUtils.separatorsToSystem(config.getFeProjResource());
    feProjName = getFeProjName(config);
    demoReactPath = feProjPath+ File.separator+ feProjName;
    
    feServerPort = getFeServerPort(config);    
  }

  public void runFEInTest() {
		String indexPath=demoReactPath+"\\public\\index.html";
	
		String cmd1 = "npx create-react-app "+feProjName;
		String cmd2 = "xcopy "+feProjResource+"\\base src\\base /i /h /y";
		String cmd3 = "xcopy "+feProjResource+"\\common src\\common /i /h /y";
		String cmd4 = "xcopy "+feProjResource+"\\app.component.css "+demoReactPath+" /y";
		String cmd5 = "xcopy "+feOutputPath+" "+ demoReactPath +"\\src /e /i /h /y";
		String cmd6 = "npm install";
		
    logger.info(this.getClass().getSimpleName() + ": FE server port: " + feServerPort);
		String cmd7 = String.format("PORT=%d npm start", feServerPort);
	
    runFECmds(indexPath, cmd1, cmd2, cmd3, cmd4, cmd5);
	}
	
	public void runFEInWin() {
		String indexPath=demoReactPath+"\\public\\index.html";
	
		String cmd1 = "npx create-react-app "+feProjName;
		String cmd2 = "xcopy "+feProjResource+"\\base src\\base /i /h /y";
		String cmd3 = "xcopy "+feProjResource+"\\common src\\common /i /h /y";
		String cmd4 = "xcopy "+feProjResource+"\\app.component.css "+demoReactPath+" /y";
		String cmd5 = "xcopy "+feOutputPath+" "+ demoReactPath +"\\src /e /i /h /y";
		String cmd6 = "npm install";
		
    logger.info(this.getClass().getSimpleName() + ": FE server port: " + feServerPort);
    String cmd7 = String.format("PORT=%d npm start", feServerPort);
	
    runFECmds(indexPath, cmd1, cmd2, cmd3, cmd4, cmd5, cmd6, cmd7);
	}
	
	public void runFEInLinux() {
		String indexPath=demoReactPath+"/public/index.html";
		
		String cmd1 = "npx create-react-app "+feProjName;
		String cmd2 = "cp -rf "+feProjResource+"/base src/";
		String cmd3 = "cp -rf "+feProjResource+"/common src/";
		String cmd4 = "cp -f "+feProjResource+"/package.json .";
		String cmd5 = "cp -rf "+feOutputPath+"/* src/";
		String cmd6 = 
	          "npm install"
            // seems to hang here at the console and does not move to the next command 
		        // "unzip "+feProjResource+"/node_modules.zip"
		    ;

		logger.info(this.getClass().getSimpleName() + ": FE server port: " + feServerPort);
    String cmd7 = String.format("PORT=%d npm start", feServerPort);
		
    runFECmds(indexPath, cmd1, cmd2, cmd3, cmd4, cmd5, cmd6, cmd7);
	}

	/**
	 * @requires cmds.length = 7
	 * @effects 
	 */
	 public void runFECmds(String indexPath, String...cmds) {
    File feProjDir = new File(feProjPath);
    File demoReactDir = new File(demoReactPath);
    
    boolean result = true;
    // if demoReactDir exists then do not run first command
    if (!demoReactDir.exists() || !ToolkitIO.dirContains(demoReactDir, "package.json")) {
      result = ToolkitIO.executeSysCommand(feProjDir, cmds[0]);
    }
    
    if(result) {
      result = ToolkitIO.executeSysCommand(demoReactDir, cmds[1]);
    }
  
    if(result) {
      result = ToolkitIO.executeSysCommand(demoReactDir, cmds[2]);
    }
    
    if(result) {
      result = ToolkitIO.executeSysCommand(demoReactDir, cmds[3]);
    }
    
    if(result) {
      result = ToolkitIO.executeSysCommand(demoReactDir, cmds[4]);
    }
    
//    ToolkitIO.writeTextFile(new File(indexPath), indexFileContent, true);
    
    if(result && cmds.length>=6) {
      result = ToolkitIO.executeSysCommand(demoReactDir, cmds[5]);
    }
    
    if(result && cmds.length>=7) {
      result = ToolkitIO.executeSysCommand(demoReactDir, cmds[6]);
    }
    
    if(result) {
      logger.info(this.getClass().getSimpleName() + "==============FINSH Run ===========");
    }else {
      logger.error(this.getClass().getSimpleName() + ": Error(s) occured while running Front-End");
    }
  }
}
