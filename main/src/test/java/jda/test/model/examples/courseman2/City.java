package jda.test.model.examples.courseman2;

import java.util.ArrayList;
import java.util.Collection;

import jda.modules.common.exceptions.ConstraintViolationException;
import jda.modules.common.types.Tuple;
import jda.modules.dcsl.syntax.DAssoc;
import jda.modules.dcsl.syntax.DAttr;
import jda.modules.dcsl.syntax.DCSLConstants;
import jda.modules.dcsl.syntax.DClass;
import jda.modules.dcsl.syntax.DOpt;
import jda.modules.dcsl.syntax.Select;
import jda.modules.dcsl.syntax.DAssoc.AssocEndType;
import jda.modules.dcsl.syntax.DAssoc.AssocType;
import jda.modules.dcsl.syntax.DAssoc.Associate;
import jda.modules.dcsl.syntax.DAttr.Type;

/**
 * @overview 
 * A domain class whose objects are city names. This class is used as 
 * the <code>allowedValues</code> of the domain attributes of 
 * other domain classes (e.g. Student.address).  
 * 
 * <p>Method <code>toString</code> overrides <code>Object.toString</code> to 
 * return the string representation of a city name which is expected by 
 * the application. 
 * 
 * @author dmle
 * @version 
 * - 2.0: support one-many association with {@link Student}
 */
@DClass(schema=Constants.SCHEMA_NAME)
public class City {
  
  @DAttr(name="id",id=true,auto=true,length=3,mutable=false,optional=false,type=Type.Integer)
  private int id;
  private static int idCounter;
  
  @DAttr(name="name",type=Type.String,length=20,optional=false)
  private String name;
  
  @DAttr(name="student",type=Type.Collection,optional=false,
      filter=@Select(clazz=Student.class),
      serialisable=false)
  @DAssoc(ascName="city-has-student",role="city",ascType=AssocType.One2Many, endType=AssocEndType.One,
    associate=@Associate(type=Student.class,cardMin=1,cardMax=DCSLConstants.CARD_MORE))
  private Collection<Student> students;
  
  public City(String cityName) {
    this(null, cityName);
  }

  public City(Integer id, String cityName) {
    this.id = nextId(id);
    this.name = cityName;
    
    students = new ArrayList();
  }
  
  private static int nextId(Integer currID) {
    if (currID == null) {
      idCounter++;
      return idCounter;
    } else {
      int num = currID.intValue();
      if (num > idCounter)
        idCounter = num;
      
      return currID;
    }
  }

  /**
   * @requires 
   *  minVal != null /\ maxVal != null
   * @effects 
   *  update the auto-generated value of attribute <tt>attrib</tt>, specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
   */
  @DOpt(type=DOpt.Type.AutoAttributeValueSynchroniser)
  public static void updateAutoGeneratedValue(
      DAttr attrib,
      Tuple derivingValue, 
      Object minVal, 
      Object maxVal) throws ConstraintViolationException {
    
    if (minVal != null && maxVal != null) {
      //TODO: update this for the correct attribute if there are more than one auto attributes of this class 
      int maxIdVal = (Integer) maxVal;
      if (maxIdVal > idCounter)  
        idCounter = maxIdVal;
    }
  }
  
  public int getId() {
    return id;
  }
  
  public String getName() {
    return name;
  }
  
  public Collection<Student> getStudents() {
    return students;
  }

  public void setStudents(Collection<Student> students) {
    this.students = students;
  }

  //TODO: add association-related operations for {@link #students}  
  
  @Override
  public String toString() {
    return name;
  }
}
