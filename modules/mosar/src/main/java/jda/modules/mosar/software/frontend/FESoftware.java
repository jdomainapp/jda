package jda.modules.mosar.software.frontend;

import jda.modules.mosarfrontend.common.factory.AppFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.Marker;

import jda.modules.dcsl.util.DClassTk;
import jda.modules.mosar.config.RFSGenConfig;
import jda.modules.mosar.software.frontend.generators.ViewBootstrapper;

/**
 * @overview 
 *  Executes the frontend software automation flow.
 * @author Duc Minh Le (ducmle)
 *
 * @version 
 */
public class FESoftware {
  private RFSGenConfig cfg;

  private static Logger logger = (Logger) LoggerFactory.getLogger("module.restfstool");

  public FESoftware(RFSGenConfig cfg) {
    this.cfg = cfg;
    
  }

  /**
   * @effects 
   *  initialises this using <code>cfg</code>
   */
  public FESoftware init() {
    logger.info("Initiating FESoftware...");

    // do nothing 
    return this;
  }
  
  /**
   * @effects 
   *  Generates the front-end software.
   *  
   *  <p>The source code is saved to the target front-end output path pecified in <code>cfg</code>. 
   */
  public FESoftware generate() {
    logger.info("Generating frontend...");
    AppFactory appFactory = new AppFactory(cfg);
    appFactory.genAndSave();
    return this;
  }
  
  
  /**
   * Use this method IMMEDIATELY AFTER the generated classes have been compiled by the generator
   * @effects 
   *  run the back-end software after it has been generated by {@link #generate(RFSGenConfig)}.
   */
  public FESoftware run() {
    logger.info("Running frontend...");

    Class<? extends FEApp> appCls = cfg.getFeAppClass();

    FEApp app = DClassTk.createObject(appCls, 
        RFSGenConfig.class,
        cfg);
    
    if (cfg.getFeThreaded()) {
      try {
        app.runThreaded();
      } catch (Exception e) {
        logger.error(Marker.ANY_MARKER, e.getMessage(), e);
      }
    } else {
      app.run();
    }
    
    return this;
  }
}
